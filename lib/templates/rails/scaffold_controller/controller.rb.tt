class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: [:show, :edit, :update, :destroy, :get_<%= singular_table_name %>]

  def index
    authorize <%= singular_table_name.capitalize %>

    if params[:<%= plural_table_name %>_grid].nil? || params[:<%= plural_table_name %>_grid].blank?
      @<%= plural_table_name %> = <%= controller_class_name %>Grid.new(:current_user => @current_user)
      @<%= plural_table_name %>_to_export = <%= controller_class_name %>Grid.new(:current_user => @current_user)
    else
      @<%= plural_table_name %> = <%= controller_class_name %>Grid.new(params[:<%= plural_table_name %>_grid].merge(current_user: @current_user))
      @<%= plural_table_name %>_to_export = <%= controller_class_name %>Grid.new(params[:<%= plural_table_name %>_grid].merge(current_user: @current_user))
    end

    @<%= plural_table_name %>.scope {|scope| scope.page(params[:page]) }

    respond_to do |format|
      format.html
      format.csv do
        send_data @<%= plural_table_name %>_to_export.to_csv(col_sep: ";").encode("ISO-8859-1"), 
        type: "text/csv", 
        disposition: 'inline', 
        filename: <%= singular_table_name.capitalize %>.model_name.human(count: 2)+" - #{Time.now.to_s}.csv"
      end
    end
  end

  def new
    authorize <%= singular_table_name.capitalize %>
    @<%= singular_table_name %> = <%= singular_table_name.capitalize %>.new
    build_initial_relations
  end

  def edit
    authorize @<%= singular_table_name %>
    build_initial_relations
  end

  def create
    authorize <%= singular_table_name.capitalize %>
    @<%= singular_table_name %> = <%= singular_table_name.capitalize %>.new(<%= singular_table_name %>_params)
    if @<%= singular_table_name %>.save
      flash[:success] = t('flash.create')
      redirect_to <%= plural_table_name %>_path
    else
      flash[:error] = @<%= singular_table_name %>.errors.full_messages.join('<br>')
      build_initial_relations
      render :new
    end
  end

  def update
    authorize @<%= singular_table_name %>
    @<%= singular_table_name %>.update(<%= singular_table_name %>_params)
    if @<%= singular_table_name %>.valid?
      flash[:success] = t('flash.update')
      redirect_to edit_<%= singular_table_name %>_path(@<%= singular_table_name %>)
    else
      flash[:error] = @<%= singular_table_name %>.errors.full_messages.join('<br>')
      build_initial_relations
      render :edit
    end
  end

  def destroy
    authorize @<%= singular_table_name %>
    if @<%= singular_table_name %>.destroy
      flash[:success] = t('flash.destroy')
    else
      flash[:error] = @<%= singular_table_name %>.errors.full_messages.join('<br>')
    end
    redirect_back(fallback_location: :back)
  end

  def build_initial_relations
    # if @<%= singular_table_name %>.relations.select{ |item| item[:id].nil? }.length == 0
    #  @<%= singular_table_name %>.relations.build
    # end
    # @<%= singular_table_name %>.build_relation if @<%= singular_table_name %>.relation.nil?
  end

  def get_<%= singular_table_name %>
    data = {
      result: @<%= singular_table_name %>
    }
    respond_to do |format|
      format.json {render :json => data, :status => 200}
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = <%= singular_table_name.capitalize %>.find(params[:id])
  end

  # Never trust parameters from the scary internet, only allow the white.
  def <%= singular_table_name %>_params
    params.require(:<%= singular_table_name %>).permit(:id, 
    <%- attributes.each do |attribute| -%>
    <%- if attribute.reference? -%>
    :<%= attribute.name %>_id,
    <%- else -%>
    :<%= attribute.name %>,
    <%- end -%>
    <%- end -%>
    )
  end
end
